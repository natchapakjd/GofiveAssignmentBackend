// <auto-generated />
using AssignmentAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssignmentAPI.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssignmentAPI.Models.Domain.Permission", b =>
                {
                    b.Property<string>("permissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDeletable")
                        .HasColumnType("bit");

                    b.Property<bool>("isReadable")
                        .HasColumnType("bit");

                    b.Property<bool>("isWritable")
                        .HasColumnType("bit");

                    b.Property<string>("permissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("permissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("AssignmentAPI.Models.Domain.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<string>("PermissionspermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Usersid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionspermissionId", "Usersid");

                    b.HasIndex("Usersid");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AssignmentAPI.Models.Domain.User", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("AssignmentAPI.Models.Domain.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionspermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("Usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
